
STM32_LAB5_HK241.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003358  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d8  080034d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e0  080034e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034e4  080034e4  000044e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080034e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08003544  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003544  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a2  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dda  00000000  00000000  0000e627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000628  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c30  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bee2  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084eab  00000000  00000000  00034d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  000b9c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000bc0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800344c 	.word	0x0800344c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800344c 	.word	0x0800344c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <validate_command>:
 *
 *  Created on: Nov 27, 2024
 *      Author: 84859
 */
#include "command_parser_fsm.h"
uint8_t validate_command(uint8_t *buffer) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if (buffer[0] == '!' && buffer[strlen((char *)buffer) - 1] == '#') {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b21      	cmp	r3, #33	@ 0x21
 800016a:	d121      	bne.n	80001b0 <validate_command+0x54>
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f7ff ffed 	bl	800014c <strlen>
 8000172:	4603      	mov	r3, r0
 8000174:	3b01      	subs	r3, #1
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	4413      	add	r3, r2
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b23      	cmp	r3, #35	@ 0x23
 800017e:	d117      	bne.n	80001b0 <validate_command+0x54>
        if (strncmp((char *)&buffer[1], "RST", strlen("RST")) == 0) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	3301      	adds	r3, #1
 8000184:	2203      	movs	r2, #3
 8000186:	490d      	ldr	r1, [pc, #52]	@ (80001bc <validate_command+0x60>)
 8000188:	4618      	mov	r0, r3
 800018a:	f002 fcc5 	bl	8002b18 <strncmp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d101      	bne.n	8000198 <validate_command+0x3c>
            return 1; // Lệnh Reset hợp lệ
 8000194:	2301      	movs	r3, #1
 8000196:	e00c      	b.n	80001b2 <validate_command+0x56>
        } else if (strncmp((char *)&buffer[1], "OK", strlen("OK")) == 0) {
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3301      	adds	r3, #1
 800019c:	2202      	movs	r2, #2
 800019e:	4908      	ldr	r1, [pc, #32]	@ (80001c0 <validate_command+0x64>)
 80001a0:	4618      	mov	r0, r3
 80001a2:	f002 fcb9 	bl	8002b18 <strncmp>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d101      	bne.n	80001b0 <validate_command+0x54>
            return 2; // Lệnh OK hợp lệ
 80001ac:	2302      	movs	r3, #2
 80001ae:	e000      	b.n	80001b2 <validate_command+0x56>
        }
    }
    return 0; // Lệnh không hợp lệ
 80001b0:	2300      	movs	r3, #0
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	08003464 	.word	0x08003464
 80001c0:	08003468 	.word	0x08003468

080001c4 <command_parser_fsm>:

void command_parser_fsm() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
    switch (state) {
 80001c8:	4b26      	ldr	r3, [pc, #152]	@ (8000264 <command_parser_fsm+0xa0>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d002      	beq.n	80001d6 <command_parser_fsm+0x12>
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d008      	beq.n	80001e6 <command_parser_fsm+0x22>
 80001d4:	e025      	b.n	8000222 <command_parser_fsm+0x5e>
        case IDLE:
            if (temp == '!') { // Ký tự bắt đầu lệnh
 80001d6:	4b24      	ldr	r3, [pc, #144]	@ (8000268 <command_parser_fsm+0xa4>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b21      	cmp	r3, #33	@ 0x21
 80001dc:	d11e      	bne.n	800021c <command_parser_fsm+0x58>
                state = RECEIVING;
 80001de:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <command_parser_fsm+0xa0>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80001e4:	e01a      	b.n	800021c <command_parser_fsm+0x58>

        case RECEIVING:
			  // Ký tự kết thúc lệnh
			if(temp == '#'){
 80001e6:	4b20      	ldr	r3, [pc, #128]	@ (8000268 <command_parser_fsm+0xa4>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b23      	cmp	r3, #35	@ 0x23
 80001ec:	d118      	bne.n	8000220 <command_parser_fsm+0x5c>
						buffer[index_buffer] = '\0';
 80001ee:	4b1f      	ldr	r3, [pc, #124]	@ (800026c <command_parser_fsm+0xa8>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000270 <command_parser_fsm+0xac>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	5499      	strb	r1, [r3, r2]
				if (validate_command(buffer)) { // Kiểm tra lệnh hợp lệ
 80001fa:	481d      	ldr	r0, [pc, #116]	@ (8000270 <command_parser_fsm+0xac>)
 80001fc:	f7ff ffae 	bl	800015c <validate_command>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d00c      	beq.n	8000220 <command_parser_fsm+0x5c>
					command_flag = validate_command(buffer); // Đặt cờ báo hiệu có lệnh hợp lệ
 8000206:	481a      	ldr	r0, [pc, #104]	@ (8000270 <command_parser_fsm+0xac>)
 8000208:	f7ff ffa8 	bl	800015c <validate_command>
 800020c:	4603      	mov	r3, r0
 800020e:	461a      	mov	r2, r3
 8000210:	4b18      	ldr	r3, [pc, #96]	@ (8000274 <command_parser_fsm+0xb0>)
 8000212:	701a      	strb	r2, [r3, #0]
					state = RESPONDING;
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <command_parser_fsm+0xa0>)
 8000216:	2204      	movs	r2, #4
 8000218:	701a      	strb	r2, [r3, #0]
				}
			}
            break;
 800021a:	e001      	b.n	8000220 <command_parser_fsm+0x5c>
            break;
 800021c:	bf00      	nop
 800021e:	e000      	b.n	8000222 <command_parser_fsm+0x5e>
            break;
 8000220:	bf00      	nop
	}
    HAL_UART_Transmit(&huart2, &temp, 1, 100);
 8000222:	2364      	movs	r3, #100	@ 0x64
 8000224:	2201      	movs	r2, #1
 8000226:	4910      	ldr	r1, [pc, #64]	@ (8000268 <command_parser_fsm+0xa4>)
 8000228:	4813      	ldr	r0, [pc, #76]	@ (8000278 <command_parser_fsm+0xb4>)
 800022a:	f001 fe33 	bl	8001e94 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &buffer[0], 1, 100);
 800022e:	2364      	movs	r3, #100	@ 0x64
 8000230:	2201      	movs	r2, #1
 8000232:	490f      	ldr	r1, [pc, #60]	@ (8000270 <command_parser_fsm+0xac>)
 8000234:	4810      	ldr	r0, [pc, #64]	@ (8000278 <command_parser_fsm+0xb4>)
 8000236:	f001 fe2d 	bl	8001e94 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &buffer[1], 1, 100);
 800023a:	2364      	movs	r3, #100	@ 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	490f      	ldr	r1, [pc, #60]	@ (800027c <command_parser_fsm+0xb8>)
 8000240:	480d      	ldr	r0, [pc, #52]	@ (8000278 <command_parser_fsm+0xb4>)
 8000242:	f001 fe27 	bl	8001e94 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &buffer[2], 1, 100);
 8000246:	2364      	movs	r3, #100	@ 0x64
 8000248:	2201      	movs	r2, #1
 800024a:	490d      	ldr	r1, [pc, #52]	@ (8000280 <command_parser_fsm+0xbc>)
 800024c:	480a      	ldr	r0, [pc, #40]	@ (8000278 <command_parser_fsm+0xb4>)
 800024e:	f001 fe21 	bl	8001e94 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, &buffer[3], 1, 100);
 8000252:	2364      	movs	r3, #100	@ 0x64
 8000254:	2201      	movs	r2, #1
 8000256:	490b      	ldr	r1, [pc, #44]	@ (8000284 <command_parser_fsm+0xc0>)
 8000258:	4807      	ldr	r0, [pc, #28]	@ (8000278 <command_parser_fsm+0xb4>)
 800025a:	f001 fe1b 	bl	8001e94 <HAL_UART_Transmit>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200000a4 	.word	0x200000a4
 8000268:	20000078 	.word	0x20000078
 800026c:	2000009a 	.word	0x2000009a
 8000270:	2000007c 	.word	0x2000007c
 8000274:	2000009c 	.word	0x2000009c
 8000278:	200000dc 	.word	0x200000dc
 800027c:	2000007d 	.word	0x2000007d
 8000280:	2000007e 	.word	0x2000007e
 8000284:	2000007f 	.word	0x2000007f

08000288 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 if(huart -> Instance == USART2 ){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <HAL_UART_RxCpltCallback+0x84>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d133      	bne.n	8000302 <HAL_UART_RxCpltCallback+0x7a>
	 //HAL_UART_Transmit (& huart2 , &temp , 1, 50) ;
	 if(temp == '!'){
 800029a:	4b1d      	ldr	r3, [pc, #116]	@ (8000310 <HAL_UART_RxCpltCallback+0x88>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b21      	cmp	r3, #33	@ 0x21
 80002a0:	d112      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0x40>
		 if(command_flag == 0)
 80002a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <HAL_UART_RxCpltCallback+0x8c>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d11c      	bne.n	80002e4 <HAL_UART_RxCpltCallback+0x5c>
		 {
			 buffer [index_buffer ++] = temp ;
 80002aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	b2d1      	uxtb	r1, r2
 80002b2:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002b4:	7011      	strb	r1, [r2, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <HAL_UART_RxCpltCallback+0x88>)
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <HAL_UART_RxCpltCallback+0x94>)
 80002be:	5499      	strb	r1, [r3, r2]
			 command_flag = 1;
 80002c0:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <HAL_UART_RxCpltCallback+0x8c>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e00d      	b.n	80002e4 <HAL_UART_RxCpltCallback+0x5c>
		 }
	 } else {
		 buffer [index_buffer ++] = temp ;
 80002c8:	4b13      	ldr	r3, [pc, #76]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	b2d1      	uxtb	r1, r2
 80002d0:	4a11      	ldr	r2, [pc, #68]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002d2:	7011      	strb	r1, [r2, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <HAL_UART_RxCpltCallback+0x88>)
 80002d8:	7819      	ldrb	r1, [r3, #0]
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <HAL_UART_RxCpltCallback+0x94>)
 80002dc:	5499      	strb	r1, [r3, r2]
		 command_flag = 0;
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <HAL_UART_RxCpltCallback+0x8c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
	 }

	 if( index_buffer == 30) index_buffer = 0;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b1e      	cmp	r3, #30
 80002ea:	d102      	bne.n	80002f2 <HAL_UART_RxCpltCallback+0x6a>
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <HAL_UART_RxCpltCallback+0x90>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]

	 buffer_flag = 1;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <HAL_UART_RxCpltCallback+0x98>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT (& huart2 , &temp , 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	4905      	ldr	r1, [pc, #20]	@ (8000310 <HAL_UART_RxCpltCallback+0x88>)
 80002fc:	4809      	ldr	r0, [pc, #36]	@ (8000324 <HAL_UART_RxCpltCallback+0x9c>)
 80002fe:	f001 fe54 	bl	8001faa <HAL_UART_Receive_IT>
  }
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40004400 	.word	0x40004400
 8000310:	20000078 	.word	0x20000078
 8000314:	2000009c 	.word	0x2000009c
 8000318:	2000009a 	.word	0x2000009a
 800031c:	2000007c 	.word	0x2000007c
 8000320:	2000009b 	.word	0x2000009b
 8000324:	200000dc 	.word	0x200000dc

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 fad4 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f81e 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f000 f8d4 	bl	80004e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000338:	f000 f86a 	bl	8000410 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800033c:	f000 f8a6 	bl	800048c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (& huart2 , &temp , 1);
 8000340:	2201      	movs	r2, #1
 8000342:	4908      	ldr	r1, [pc, #32]	@ (8000364 <main+0x3c>)
 8000344:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0x40>)
 8000346:	f001 fe30 	bl	8001faa <HAL_UART_Receive_IT>
	  //ADC_value = HAL_ADC_GetValue(&hadc1);

	  //HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);

	  // Chuyển đổi giá trị ADC sang chuỗi và gửi qua UART
	  if(buffer_flag == 1){
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <main+0x44>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d104      	bne.n	800035c <main+0x34>
	command_parser_fsm();
 8000352:	f7ff ff37 	bl	80001c4 <command_parser_fsm>
	  buffer_flag = 0;
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <main+0x44>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communication_fsm();
 800035c:	f000 fa2a 	bl	80007b4 <uart_communication_fsm>
	  if(buffer_flag == 1){
 8000360:	e7f3      	b.n	800034a <main+0x22>
 8000362:	bf00      	nop
 8000364:	20000078 	.word	0x20000078
 8000368:	200000dc 	.word	0x200000dc
 800036c:	2000009b 	.word	0x2000009b

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b094      	sub	sp, #80	@ 0x50
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800037a:	2228      	movs	r2, #40	@ 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fbc2 	bl	8002b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a0:	2302      	movs	r3, #2
 80003a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a8:	2310      	movs	r3, #16
 80003aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 f857 	bl	8001468 <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003c0:	f000 f8c0 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fac4 	bl	800196c <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003ea:	f000 f8ab 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ee:	2302      	movs	r3, #2
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fc45 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000404:	f000 f89e 	bl	8000544 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3750      	adds	r7, #80	@ 0x50
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_ADC1_Init+0x74>)
 8000422:	4a19      	ldr	r2, [pc, #100]	@ (8000488 <MX_ADC1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_ADC1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_ADC1_Init+0x74>)
 800042e:	2201      	movs	r2, #1
 8000430:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <MX_ADC1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <MX_ADC1_Init+0x74>)
 800043a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800043e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <MX_ADC1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_ADC1_Init+0x74>)
 8000448:	2201      	movs	r2, #1
 800044a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044c:	480d      	ldr	r0, [pc, #52]	@ (8000484 <MX_ADC1_Init+0x74>)
 800044e:	f000 faa5 	bl	800099c <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 f874 	bl	8000544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	2301      	movs	r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_ADC1_Init+0x74>)
 800046e:	f000 fb6d 	bl	8000b4c <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000478:	f000 f864 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000ac 	.word	0x200000ac
 8000488:	40012400 	.word	0x40012400

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 8000492:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <MX_USART2_UART_Init+0x50>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 8000498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004c4:	f001 fc96 	bl	8001df4 <HAL_UART_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ce:	f000 f839 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000dc 	.word	0x200000dc
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_GPIO_Init+0x5c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a10      	ldr	r2, [pc, #64]	@ (800053c <MX_GPIO_Init+0x5c>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <MX_GPIO_Init+0x5c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	480b      	ldr	r0, [pc, #44]	@ (8000540 <MX_GPIO_Init+0x60>)
 8000512:	f000 ff91 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000516:	2320      	movs	r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	4619      	mov	r1, r3
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <MX_GPIO_Init+0x60>)
 800052e:	f000 fe07 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <HAL_MspInit+0x5c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_MspInit+0x5c>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_MspInit+0x60>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <HAL_MspInit+0x60>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <HAL_ADC_MspInit+0x6c>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d121      	bne.n	8000618 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <HAL_ADC_MspInit+0x74>)
 8000614:	f000 fd94 	bl	8001140 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40012400 	.word	0x40012400
 8000624:	40021000 	.word	0x40021000
 8000628:	40010800 	.word	0x40010800

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1f      	ldr	r2, [pc, #124]	@ (80006c4 <HAL_UART_MspInit+0x98>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d137      	bne.n	80006bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 8000652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000656:	61d3      	str	r3, [r2, #28]
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_UART_MspInit+0x9c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067c:	2304      	movs	r3, #4
 800067e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	480f      	ldr	r0, [pc, #60]	@ (80006cc <HAL_UART_MspInit+0xa0>)
 8000690:	f000 fd56 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000694:	2308      	movs	r3, #8
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <HAL_UART_MspInit+0xa0>)
 80006a8:	f000 fd4a 	bl	8001140 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2026      	movs	r0, #38	@ 0x26
 80006b2:	f000 fc5c 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006b6:	2026      	movs	r0, #38	@ 0x26
 80006b8:	f000 fc75 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40004400 	.word	0x40004400
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <NMI_Handler+0x4>

080006d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <MemManage_Handler+0x4>

080006e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f920 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800072c:	4802      	ldr	r0, [pc, #8]	@ (8000738 <USART2_IRQHandler+0x10>)
 800072e:	f001 fc61 	bl	8001ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000dc 	.word	0x200000dc

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f002 f9e6 	bl	8002b3c <__errno>
 8000770:	4603      	mov	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <_sbrk+0x64>)
 800078c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20002800 	.word	0x20002800
 800079c:	00000400 	.word	0x00000400
 80007a0:	20000124 	.word	0x20000124
 80007a4:	20000278 	.word	0x20000278

080007a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <uart_communication_fsm>:
 *  Created on: Nov 27, 2024
 *      Author: 84859
 */
#include "uart_communication_fsm.h"

void uart_communication_fsm() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

    char response[30];

    switch (state) {
 80007ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000870 <uart_communication_fsm+0xbc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b04      	cmp	r3, #4
 80007c0:	d002      	beq.n	80007c8 <uart_communication_fsm+0x14>
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	d026      	beq.n	8000814 <uart_communication_fsm+0x60>
            if(buffer_flag == 1){
            	state = IDLE;
            }
            break;
    }
}
 80007c6:	e04e      	b.n	8000866 <uart_communication_fsm+0xb2>
            if (command_flag == 1) { // Lệnh !RST#
 80007c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000874 <uart_communication_fsm+0xc0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d119      	bne.n	8000804 <uart_communication_fsm+0x50>
                command_flag = 0; // Xóa cờ
 80007d0:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <uart_communication_fsm+0xc0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)response, sprintf (response , "!ADC=%lu\n#", ADC_value ), HAL_MAX_DELAY);
 80007d6:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <uart_communication_fsm+0xc4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	463b      	mov	r3, r7
 80007dc:	4927      	ldr	r1, [pc, #156]	@ (800087c <uart_communication_fsm+0xc8>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f972 	bl	8002ac8 <siprintf>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4639      	mov	r1, r7
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	4824      	ldr	r0, [pc, #144]	@ (8000880 <uart_communication_fsm+0xcc>)
 80007f0:	f001 fb50 	bl	8001e94 <HAL_UART_Transmit>
                timeout_start = HAL_GetTick();
 80007f4:	f000 f8c8 	bl	8000988 <HAL_GetTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <uart_communication_fsm+0xd0>)
 80007fc:	6013      	str	r3, [r2, #0]
                state = WAIT_ACK;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <uart_communication_fsm+0xbc>)
 8000800:	2205      	movs	r2, #5
 8000802:	701a      	strb	r2, [r3, #0]
            if (command_flag == 2){
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <uart_communication_fsm+0xc0>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d129      	bne.n	8000860 <uart_communication_fsm+0xac>
            	state = IDLE;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <uart_communication_fsm+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
            break;
 8000812:	e025      	b.n	8000860 <uart_communication_fsm+0xac>
            if (HAL_GetTick() - timeout_start > 3000) { // Hết thời gian chờ
 8000814:	f000 f8b8 	bl	8000988 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <uart_communication_fsm+0xd0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000824:	4293      	cmp	r3, r2
 8000826:	d913      	bls.n	8000850 <uart_communication_fsm+0x9c>
                HAL_UART_Transmit(&huart2, (uint8_t *)response, sprintf (response , "!ADC=%lu\n#", ADC_value ), HAL_MAX_DELAY);
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <uart_communication_fsm+0xc4>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	463b      	mov	r3, r7
 800082e:	4913      	ldr	r1, [pc, #76]	@ (800087c <uart_communication_fsm+0xc8>)
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f949 	bl	8002ac8 <siprintf>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	4639      	mov	r1, r7
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	480f      	ldr	r0, [pc, #60]	@ (8000880 <uart_communication_fsm+0xcc>)
 8000842:	f001 fb27 	bl	8001e94 <HAL_UART_Transmit>
                timeout_start = HAL_GetTick();
 8000846:	f000 f89f 	bl	8000988 <HAL_GetTick>
 800084a:	4603      	mov	r3, r0
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <uart_communication_fsm+0xd0>)
 800084e:	6013      	str	r3, [r2, #0]
            if(buffer_flag == 1){
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <uart_communication_fsm+0xd4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <uart_communication_fsm+0xb0>
            	state = IDLE;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <uart_communication_fsm+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
            break;
 800085e:	e001      	b.n	8000864 <uart_communication_fsm+0xb0>
            break;
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <uart_communication_fsm+0xb2>
            break;
 8000864:	bf00      	nop
}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000a4 	.word	0x200000a4
 8000874:	2000009c 	.word	0x2000009c
 8000878:	200000a8 	.word	0x200000a8
 800087c:	0800346c 	.word	0x0800346c
 8000880:	200000dc 	.word	0x200000dc
 8000884:	200000a0 	.word	0x200000a0
 8000888:	2000009b 	.word	0x2000009b

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800088c:	f7ff ff8c 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480b      	ldr	r0, [pc, #44]	@ (80008c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000892:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000894:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a09      	ldr	r2, [pc, #36]	@ (80008cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a8:	4c09      	ldr	r4, [pc, #36]	@ (80008d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 f947 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fd35 	bl	8000328 <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c8:	080034e8 	.word	0x080034e8
  ldr r2, =_sbss
 80008cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008d0:	20000274 	.word	0x20000274

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 fb35 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	200f      	movs	r0, #15
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fe2c 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fb4d 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f000 fb15 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	@ (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	20000128 	.word	0x20000128

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	@ (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000128 	.word	0x20000128

0800099c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e0be      	b.n	8000b3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fdea 	bl	80005b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f9ab 	bl	8000d3c <ADC_ConversionStop_Disable>
 80009e6:	4603      	mov	r3, r0
 80009e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8099 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 8095 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a08:	f023 0302 	bic.w	r3, r3, #2
 8000a0c:	f043 0202 	orr.w	r2, r3, #2
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7b1b      	ldrb	r3, [r3, #12]
 8000a22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a34:	d003      	beq.n	8000a3e <HAL_ADC_Init+0xa2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <HAL_ADC_Init+0xa8>
 8000a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a42:	e000      	b.n	8000a46 <HAL_ADC_Init+0xaa>
 8000a44:	2300      	movs	r3, #0
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7d1b      	ldrb	r3, [r3, #20]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d119      	bne.n	8000a88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	035a      	lsls	r2, r3, #13
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e00b      	b.n	8000a88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a74:	f043 0220 	orr.w	r2, r3, #32
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a80:	f043 0201 	orr.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <HAL_ADC_Init+0x1a8>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab8:	d003      	beq.n	8000ac2 <HAL_ADC_Init+0x126>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d104      	bne.n	8000acc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	051b      	lsls	r3, r3, #20
 8000aca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_ADC_Init+0x1ac>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d10b      	bne.n	8000b08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afa:	f023 0303 	bic.w	r3, r3, #3
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b06:	e018      	b.n	8000b3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b0c:	f023 0312 	bic.w	r3, r3, #18
 8000b10:	f043 0210 	orr.w	r2, r3, #16
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1c:	f043 0201 	orr.w	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b28:	e007      	b.n	8000b3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	ffe1f7fd 	.word	0xffe1f7fd
 8000b48:	ff1f0efe 	.word	0xff1f0efe

08000b4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d101      	bne.n	8000b6c <HAL_ADC_ConfigChannel+0x20>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e0dc      	b.n	8000d26 <HAL_ADC_ConfigChannel+0x1da>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	d81c      	bhi.n	8000bb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b05      	subs	r3, #5
 8000b8e:	221f      	movs	r2, #31
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b05      	subs	r3, #5
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb4:	e03c      	b.n	8000c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b0c      	cmp	r3, #12
 8000bbc:	d81c      	bhi.n	8000bf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	3b23      	subs	r3, #35	@ 0x23
 8000bd0:	221f      	movs	r2, #31
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4019      	ands	r1, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	3b23      	subs	r3, #35	@ 0x23
 8000bea:	fa00 f203 	lsl.w	r2, r0, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf6:	e01b      	b.n	8000c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	3b41      	subs	r3, #65	@ 0x41
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4019      	ands	r1, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b41      	subs	r3, #65	@ 0x41
 8000c24:	fa00 f203 	lsl.w	r2, r0, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b09      	cmp	r3, #9
 8000c36:	d91c      	bls.n	8000c72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68d9      	ldr	r1, [r3, #12]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	3b1e      	subs	r3, #30
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4019      	ands	r1, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6898      	ldr	r0, [r3, #8]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	3b1e      	subs	r3, #30
 8000c64:	fa00 f203 	lsl.w	r2, r0, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	e019      	b.n	8000ca6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6919      	ldr	r1, [r3, #16]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	2207      	movs	r2, #7
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4019      	ands	r1, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6898      	ldr	r0, [r3, #8]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d003      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cb2:	2b11      	cmp	r3, #17
 8000cb4:	d132      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1d      	ldr	r2, [pc, #116]	@ (8000d30 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d125      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d126      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000cdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b10      	cmp	r3, #16
 8000ce4:	d11a      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9a      	lsrs	r2, r3, #18
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfc:	e002      	b.n	8000d04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f9      	bne.n	8000cfe <HAL_ADC_ConfigChannel+0x1b2>
 8000d0a:	e007      	b.n	8000d1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f043 0220 	orr.w	r2, r3, #32
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40012400 	.word	0x40012400
 8000d34:	20000000 	.word	0x20000000
 8000d38:	431bde83 	.word	0x431bde83

08000d3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d12e      	bne.n	8000db4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0201 	bic.w	r2, r2, #1
 8000d64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d66:	f7ff fe0f 	bl	8000988 <HAL_GetTick>
 8000d6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d6c:	e01b      	b.n	8000da6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d6e:	f7ff fe0b 	bl	8000988 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d914      	bls.n	8000da6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d10d      	bne.n	8000da6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8e:	f043 0210 	orr.w	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9a:	f043 0201 	orr.w	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e007      	b.n	8000db6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d0dc      	beq.n	8000d6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <__NVIC_EnableIRQ+0x34>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff90 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff2d 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff42 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff90 	bl	8000eb0 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5f 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff35 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e020      	b.n	8001046 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d005      	beq.n	8001074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e051      	b.n	8001118 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a22      	ldr	r2, [pc, #136]	@ (8001124 <HAL_DMA_Abort_IT+0xd4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d029      	beq.n	80010f2 <HAL_DMA_Abort_IT+0xa2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <HAL_DMA_Abort_IT+0xd8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d022      	beq.n	80010ee <HAL_DMA_Abort_IT+0x9e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <HAL_DMA_Abort_IT+0xdc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01a      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x98>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <HAL_DMA_Abort_IT+0xe0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d012      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x92>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <HAL_DMA_Abort_IT+0xe4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00a      	beq.n	80010dc <HAL_DMA_Abort_IT+0x8c>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <HAL_DMA_Abort_IT+0xe8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d102      	bne.n	80010d6 <HAL_DMA_Abort_IT+0x86>
 80010d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010d4:	e00e      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010da:	e00b      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e0:	e008      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	e005      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ec:	e002      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010ee:	2310      	movs	r3, #16
 80010f0:	e000      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010f2:	2301      	movs	r3, #1
 80010f4:	4a11      	ldr	r2, [pc, #68]	@ (800113c <HAL_DMA_Abort_IT+0xec>)
 80010f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
    } 
  }
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020008 	.word	0x40020008
 8001128:	4002001c 	.word	0x4002001c
 800112c:	40020030 	.word	0x40020030
 8001130:	40020044 	.word	0x40020044
 8001134:	40020058 	.word	0x40020058
 8001138:	4002006c 	.word	0x4002006c
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b08b      	sub	sp, #44	@ 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e161      	b.n	8001418 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001154:	2201      	movs	r2, #1
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8150 	bne.w	8001412 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a97      	ldr	r2, [pc, #604]	@ (80013d4 <HAL_GPIO_Init+0x294>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d05e      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 800117c:	4a95      	ldr	r2, [pc, #596]	@ (80013d4 <HAL_GPIO_Init+0x294>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d875      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 8001182:	4a95      	ldr	r2, [pc, #596]	@ (80013d8 <HAL_GPIO_Init+0x298>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d058      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001188:	4a93      	ldr	r2, [pc, #588]	@ (80013d8 <HAL_GPIO_Init+0x298>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d86f      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800118e:	4a93      	ldr	r2, [pc, #588]	@ (80013dc <HAL_GPIO_Init+0x29c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d052      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001194:	4a91      	ldr	r2, [pc, #580]	@ (80013dc <HAL_GPIO_Init+0x29c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d869      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800119a:	4a91      	ldr	r2, [pc, #580]	@ (80013e0 <HAL_GPIO_Init+0x2a0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d04c      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011a0:	4a8f      	ldr	r2, [pc, #572]	@ (80013e0 <HAL_GPIO_Init+0x2a0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d863      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011a6:	4a8f      	ldr	r2, [pc, #572]	@ (80013e4 <HAL_GPIO_Init+0x2a4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d046      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011ac:	4a8d      	ldr	r2, [pc, #564]	@ (80013e4 <HAL_GPIO_Init+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d85d      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d82a      	bhi.n	800120c <HAL_GPIO_Init+0xcc>
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d859      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <HAL_GPIO_Init+0x80>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	0800123b 	.word	0x0800123b
 80011c4:	08001215 	.word	0x08001215
 80011c8:	08001227 	.word	0x08001227
 80011cc:	08001269 	.word	0x08001269
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	0800126f 	.word	0x0800126f
 80011d8:	0800126f 	.word	0x0800126f
 80011dc:	0800126f 	.word	0x0800126f
 80011e0:	0800126f 	.word	0x0800126f
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	0800126f 	.word	0x0800126f
 80011ec:	0800126f 	.word	0x0800126f
 80011f0:	0800126f 	.word	0x0800126f
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	0800126f 	.word	0x0800126f
 80011fc:	0800126f 	.word	0x0800126f
 8001200:	0800126f 	.word	0x0800126f
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001231 	.word	0x08001231
 800120c:	4a76      	ldr	r2, [pc, #472]	@ (80013e8 <HAL_GPIO_Init+0x2a8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001212:	e02c      	b.n	800126e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e029      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e024      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	3308      	adds	r3, #8
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e01f      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	330c      	adds	r3, #12
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e01a      	b.n	8001270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001242:	2304      	movs	r3, #4
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e013      	b.n	8001270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	611a      	str	r2, [r3, #16]
          break;
 800125a:	e009      	b.n	8001270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	615a      	str	r2, [r3, #20]
          break;
 8001266:	e003      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x130>
          break;
 800126e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	@ 0xff
 8001274:	d801      	bhi.n	800127a <HAL_GPIO_Init+0x13a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e001      	b.n	800127e <HAL_GPIO_Init+0x13e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2bff      	cmp	r3, #255	@ 0xff
 8001284:	d802      	bhi.n	800128c <HAL_GPIO_Init+0x14c>
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x152>
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	3b08      	subs	r3, #8
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	210f      	movs	r1, #15
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	6a39      	ldr	r1, [r7, #32]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80a9 	beq.w	8001412 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c0:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a49      	ldr	r2, [pc, #292]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <HAL_GPIO_Init+0x2ac>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d8:	4a45      	ldr	r2, [pc, #276]	@ (80013f0 <HAL_GPIO_Init+0x2b0>)
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3d      	ldr	r2, [pc, #244]	@ (80013f4 <HAL_GPIO_Init+0x2b4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3c      	ldr	r2, [pc, #240]	@ (80013f8 <HAL_GPIO_Init+0x2b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1dc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3b      	ldr	r2, [pc, #236]	@ (80013fc <HAL_GPIO_Init+0x2bc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1d8>
 8001314:	2302      	movs	r3, #2
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 8001318:	2303      	movs	r3, #3
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1e2>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	492f      	ldr	r1, [pc, #188]	@ (80013f0 <HAL_GPIO_Init+0x2b0>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	492b      	ldr	r1, [pc, #172]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4927      	ldr	r1, [pc, #156]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001364:	4013      	ands	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4921      	ldr	r1, [pc, #132]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	491d      	ldr	r1, [pc, #116]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800138c:	4013      	ands	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4917      	ldr	r1, [pc, #92]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4913      	ldr	r1, [pc, #76]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01f      	beq.n	8001404 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	490d      	ldr	r1, [pc, #52]	@ (8001400 <HAL_GPIO_Init+0x2c0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e01f      	b.n	8001412 <HAL_GPIO_Init+0x2d2>
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4909      	ldr	r1, [pc, #36]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae96 	bne.w	8001154 <HAL_GPIO_Init+0x14>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	372c      	adds	r7, #44	@ 0x2c
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e272      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4b8f      	ldr	r3, [pc, #572]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b89      	ldr	r3, [pc, #548]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e24c      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x76>
 80014d0:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7f      	ldr	r2, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b7b      	ldr	r3, [pc, #492]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a77      	ldr	r2, [pc, #476]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xbc>
 800150a:	4b72      	ldr	r3, [pc, #456]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a71      	ldr	r2, [pc, #452]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6f      	ldr	r3, [pc, #444]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001524:	4b6b      	ldr	r3, [pc, #428]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6a      	ldr	r2, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a67      	ldr	r2, [pc, #412]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fa20 	bl	8000988 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fa1c 	bl	8000988 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e200      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe4>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa0c 	bl	8000988 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fa08 	bl	8000988 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1ec      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x10c>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
 80015ba:	4b46      	ldr	r3, [pc, #280]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1c0      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4939      	ldr	r1, [pc, #228]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff f9c1 	bl	8000988 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff f9bd 	bl	8000988 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4927      	ldr	r1, [pc, #156]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff f9a0 	bl	8000988 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff f99c 	bl	8000988 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e180      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03a      	beq.n	80016ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_RCC_OscConfig+0x274>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f980 	bl	8000988 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff f97c 	bl	8000988 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e160      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 face 	bl	8001c4c <RCC_Delay>
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_RCC_OscConfig+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f966 	bl	8000988 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f962 	bl	8000988 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d908      	bls.n	80016e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e146      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42420000 	.word	0x42420000
 80016dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b92      	ldr	r3, [pc, #584]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e9      	bne.n	80016c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a6 	beq.w	8001846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8b      	ldr	r3, [pc, #556]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a87      	ldr	r2, [pc, #540]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b85      	ldr	r3, [pc, #532]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b82      	ldr	r3, [pc, #520]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b7f      	ldr	r3, [pc, #508]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff f923 	bl	8000988 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff f91f 	bl	8000988 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	@ 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e103      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b75      	ldr	r3, [pc, #468]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x334>
 8001782:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a69      	ldr	r2, [pc, #420]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b67      	ldr	r3, [pc, #412]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a66      	ldr	r2, [pc, #408]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x356>
 80017a4:	4b61      	ldr	r3, [pc, #388]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a60      	ldr	r2, [pc, #384]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a5d      	ldr	r2, [pc, #372]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a5a      	ldr	r2, [pc, #360]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a57      	ldr	r2, [pc, #348]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f8d3 	bl	8000988 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f8cf 	bl	8000988 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0b1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <HAL_RCC_OscConfig+0x37e>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f8bd 	bl	8000988 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f8b9 	bl	8000988 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e09b      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b40      	ldr	r3, [pc, #256]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a3b      	ldr	r2, [pc, #236]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d061      	beq.n	8001920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d146      	bne.n	80018f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f88d 	bl	8000988 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f889 	bl	8000988 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e06d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4921      	ldr	r1, [pc, #132]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	430b      	orrs	r3, r1
 80018be:	491b      	ldr	r1, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f85d 	bl	8000988 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f859 	bl	8000988 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
 80018f0:	e035      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f846 	bl	8000988 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f842 	bl	8000988 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e026      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x498>
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e019      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_OscConfig+0x500>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4965      	ldr	r1, [pc, #404]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe ff94 	bl	8000988 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe ff90 	bl	8000988 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_RCC_ClockConfig+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fef2 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003478 	.word	0x08003478
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x36>
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e027      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba2:	fb03 f202 	mul.w	r2, r3, r2
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e004      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	613b      	str	r3, [r7, #16]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc2:	613b      	str	r3, [r7, #16]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	693b      	ldr	r3, [r7, #16]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	08003490 	.word	0x08003490
 8001be0:	080034a0 	.word	0x080034a0
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	@ (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003488 	.word	0x08003488

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	@ (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003488 	.word	0x08003488

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07d      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	4b49      	ldr	r3, [pc, #292]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b46      	ldr	r3, [pc, #280]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d118      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cdc:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fe4e 	bl	8000988 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	e008      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7fe fe4a 	bl	8000988 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06d      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d0e:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d02e      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d027      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d36:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d42:	4a29      	ldr	r2, [pc, #164]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fe19 	bl	8000988 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fe15 	bl	8000988 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ee      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4917      	ldr	r1, [pc, #92]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	490b      	ldr	r1, [pc, #44]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4904      	ldr	r1, [pc, #16]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	42420440 	.word	0x42420440

08001df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e042      	b.n	8001e8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fc06 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	@ 0x24
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fdb7 	bl	80029ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d175      	bne.n	8001fa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_UART_Transmit+0x2c>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e06e      	b.n	8001fa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	@ 0x21
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fd59 	bl	8000988 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eec:	d108      	bne.n	8001f00 <HAL_UART_Transmit+0x6c>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	e003      	b.n	8001f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f08:	e02e      	b.n	8001f68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb1c 	bl	8002552 <UART_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e03a      	b.n	8001fa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	3302      	adds	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	e007      	b.n	8001f5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	3301      	adds	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1cb      	bne.n	8001f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2140      	movs	r1, #64	@ 0x40
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fae8 	bl	8002552 <UART_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d112      	bne.n	8001fea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_UART_Receive_IT+0x26>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e00b      	b.n	8001fec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fb0f 	bl	8002604 <UART_Start_Receive_IT>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	e000      	b.n	8001fec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_UART_IRQHandler+0x66>
 8002046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fbec 	bl	8002830 <UART_Receive_IT>
      return;
 8002058:	e25b      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800205a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80de 	beq.w	8002220 <HAL_UART_IRQHandler+0x22c>
 8002064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002074:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80d1 	beq.w	8002220 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_UART_IRQHandler+0xae>
 800208a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_UART_IRQHandler+0xd2>
 80020ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_UART_IRQHandler+0xf6>
 80020d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d011      	beq.n	800211a <HAL_UART_IRQHandler+0x126>
 80020f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f043 0208 	orr.w	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 81f2 	beq.w	8002508 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_UART_IRQHandler+0x14e>
 8002130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb77 	bl	8002830 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_UART_IRQHandler+0x17a>
 8002166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04f      	beq.n	800220e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa81 	bl	8002676 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d041      	beq.n	8002206 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3314      	adds	r3, #20
 8002188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800218c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002190:	e853 3f00 	ldrex	r3, [r3]
 8002194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002198:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800219c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3314      	adds	r3, #20
 80021aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80021ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1d9      	bne.n	8002182 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d013      	beq.n	80021fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_UART_IRQHandler+0x3e0>)
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff34 	bl	8001050 <HAL_DMA_Abort_IT>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021f8:	4610      	mov	r0, r2
 80021fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021fc:	e00e      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f993 	bl	800252a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	e00a      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f98f 	bl	800252a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	e006      	b.n	800221c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f98b 	bl	800252a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800221a:	e175      	b.n	8002508 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221c:	bf00      	nop
    return;
 800221e:	e173      	b.n	8002508 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	2b01      	cmp	r3, #1
 8002226:	f040 814f 	bne.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8148 	beq.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8141 	beq.w	80024c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b6 	beq.w	80023d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8145 	beq.w	800250c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800228a:	429a      	cmp	r2, r3
 800228c:	f080 813e 	bcs.w	800250c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002296:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f000 8088 	beq.w	80023b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80022ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022d0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1d9      	bne.n	80022a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3314      	adds	r3, #20
 80022f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002314:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002318:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800231c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002326:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e1      	bne.n	80022f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3314      	adds	r3, #20
 8002332:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800233c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800233e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002350:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002356:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800235e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e3      	bne.n	800232c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002384:	f023 0310 	bic.w	r3, r3, #16
 8002388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002396:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002398:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800239c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e3      	bne.n	8002372 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fe13 	bl	8000fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8b6 	bl	800253c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023d0:	e09c      	b.n	800250c <HAL_UART_IRQHandler+0x518>
 80023d2:	bf00      	nop
 80023d4:	0800273b 	.word	0x0800273b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 808e 	beq.w	8002510 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8089 	beq.w	8002510 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800240e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002422:	647a      	str	r2, [r7, #68]	@ 0x44
 8002424:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002428:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e3      	bne.n	80023fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	623b      	str	r3, [r7, #32]
   return(result);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800245a:	633a      	str	r2, [r7, #48]	@ 0x30
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e3      	bne.n	8002436 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	60fb      	str	r3, [r7, #12]
   return(result);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024a0:	61fa      	str	r2, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	617b      	str	r3, [r7, #20]
   return(result);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e3      	bne.n	800247c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f83b 	bl	800253c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c6:	e023      	b.n	8002510 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_UART_IRQHandler+0x4f4>
 80024d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f93e 	bl	8002762 <UART_Transmit_IT>
    return;
 80024e6:	e014      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_UART_IRQHandler+0x51e>
 80024f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f97d 	bl	8002800 <UART_EndTransmit_IT>
    return;
 8002506:	e004      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
    return;
 8002508:	bf00      	nop
 800250a:	e002      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
      return;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <HAL_UART_IRQHandler+0x51e>
      return;
 8002510:	bf00      	nop
  }
}
 8002512:	37e8      	adds	r7, #232	@ 0xe8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002562:	e03b      	b.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d037      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7fe fa0c 	bl	8000988 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	6a3a      	ldr	r2, [r7, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <UART_WaitOnFlagUntilTimeout+0x30>
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03a      	b.n	80025fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b80      	cmp	r3, #128	@ 0x80
 8002598:	d020      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d01d      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d116      	bne.n	80025dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f856 	bl	8002676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2208      	movs	r2, #8
 80025ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e00f      	b.n	80025fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d0b4      	beq.n	8002564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2222      	movs	r2, #34	@ 0x22
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002648:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0220 	orr.w	r2, r2, #32
 8002668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002676:	b480      	push	{r7}
 8002678:	b095      	sub	sp, #84	@ 0x54
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800269e:	643a      	str	r2, [r7, #64]	@ 0x40
 80026a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026a6:	e841 2300 	strex	r3, r2, [r1]
 80026aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e5      	bne.n	800267e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3314      	adds	r3, #20
 80026b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e5      	bne.n	80026b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d119      	bne.n	8002722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f023 0310 	bic.w	r3, r3, #16
 8002704:	647b      	str	r3, [r7, #68]	@ 0x44
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800270e:	61ba      	str	r2, [r7, #24]
 8002710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6979      	ldr	r1, [r7, #20]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	613b      	str	r3, [r7, #16]
   return(result);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e5      	bne.n	80026ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002730:	bf00      	nop
 8002732:	3754      	adds	r7, #84	@ 0x54
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fee8 	bl	800252a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b21      	cmp	r3, #33	@ 0x21
 8002774:	d13e      	bne.n	80027f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277e:	d114      	bne.n	80027aa <UART_Transmit_IT+0x48>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d110      	bne.n	80027aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	621a      	str	r2, [r3, #32]
 80027a8:	e008      	b.n	80027bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6211      	str	r1, [r2, #32]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4619      	mov	r1, r3
 80027ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10f      	bne.n	80027f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002816:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe79 	bl	8002518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b22      	cmp	r3, #34	@ 0x22
 8002842:	f040 80ae 	bne.w	80029a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284e:	d117      	bne.n	8002880 <UART_Receive_IT+0x50>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	b29a      	uxth	r2, r3
 8002870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002872:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	@ 0x28
 800287e:	e026      	b.n	80028ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002892:	d007      	beq.n	80028a4 <UART_Receive_IT+0x74>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <UART_Receive_IT+0x82>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e008      	b.n	80028c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4619      	mov	r1, r3
 80028dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d15d      	bne.n	800299e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0220 	bic.w	r2, r2, #32
 80028f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002900:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	d135      	bne.n	8002994 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	613b      	str	r3, [r7, #16]
   return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f023 0310 	bic.w	r3, r3, #16
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294e:	623a      	str	r2, [r7, #32]
 8002950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	61bb      	str	r3, [r7, #24]
   return(result);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e5      	bne.n	800292e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	d10a      	bne.n	8002986 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fdd5 	bl	800253c <HAL_UARTEx_RxEventCallback>
 8002992:	e002      	b.n	800299a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fd fc77 	bl	8000288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e002      	b.n	80029a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3730      	adds	r7, #48	@ 0x30
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029e6:	f023 030c 	bic.w	r3, r3, #12
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <UART_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff f906 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	e002      	b.n	8002a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7ff f8ee 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	0119      	lsls	r1, r3, #4
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2064      	movs	r0, #100	@ 0x64
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	3332      	adds	r3, #50	@ 0x32
 8002a6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a78:	4419      	add	r1, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	@ 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	@ 0x32
 8002aa4:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	51eb851f 	.word	0x51eb851f

08002ac8 <siprintf>:
 8002ac8:	b40e      	push	{r1, r2, r3}
 8002aca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ace:	b500      	push	{lr}
 8002ad0:	b09c      	sub	sp, #112	@ 0x70
 8002ad2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ad4:	9002      	str	r0, [sp, #8]
 8002ad6:	9006      	str	r0, [sp, #24]
 8002ad8:	9107      	str	r1, [sp, #28]
 8002ada:	9104      	str	r1, [sp, #16]
 8002adc:	4808      	ldr	r0, [pc, #32]	@ (8002b00 <siprintf+0x38>)
 8002ade:	4909      	ldr	r1, [pc, #36]	@ (8002b04 <siprintf+0x3c>)
 8002ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ae4:	9105      	str	r1, [sp, #20]
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	a902      	add	r1, sp, #8
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	f000 f9a4 	bl	8002e38 <_svfiprintf_r>
 8002af0:	2200      	movs	r2, #0
 8002af2:	9b02      	ldr	r3, [sp, #8]
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	b01c      	add	sp, #112	@ 0x70
 8002af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002afc:	b003      	add	sp, #12
 8002afe:	4770      	bx	lr
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	ffff0208 	.word	0xffff0208

08002b08 <memset>:
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <strncmp>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	b16a      	cbz	r2, 8002b38 <strncmp+0x20>
 8002b1c:	3901      	subs	r1, #1
 8002b1e:	1884      	adds	r4, r0, r2
 8002b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <strncmp+0x1c>
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	d001      	beq.n	8002b34 <strncmp+0x1c>
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d1f5      	bne.n	8002b20 <strncmp+0x8>
 8002b34:	1ad0      	subs	r0, r2, r3
 8002b36:	bd10      	pop	{r4, pc}
 8002b38:	4610      	mov	r0, r2
 8002b3a:	e7fc      	b.n	8002b36 <strncmp+0x1e>

08002b3c <__errno>:
 8002b3c:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <__errno+0x8>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	2600      	movs	r6, #0
 8002b4c:	4d0c      	ldr	r5, [pc, #48]	@ (8002b80 <__libc_init_array+0x38>)
 8002b4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002b84 <__libc_init_array+0x3c>)
 8002b50:	1b64      	subs	r4, r4, r5
 8002b52:	10a4      	asrs	r4, r4, #2
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	f000 fc78 	bl	800344c <_init>
 8002b5c:	2600      	movs	r6, #0
 8002b5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b88 <__libc_init_array+0x40>)
 8002b60:	4c0a      	ldr	r4, [pc, #40]	@ (8002b8c <__libc_init_array+0x44>)
 8002b62:	1b64      	subs	r4, r4, r5
 8002b64:	10a4      	asrs	r4, r4, #2
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	080034e0 	.word	0x080034e0
 8002b84:	080034e0 	.word	0x080034e0
 8002b88:	080034e0 	.word	0x080034e0
 8002b8c:	080034e4 	.word	0x080034e4

08002b90 <__retarget_lock_acquire_recursive>:
 8002b90:	4770      	bx	lr

08002b92 <__retarget_lock_release_recursive>:
 8002b92:	4770      	bx	lr

08002b94 <_free_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4605      	mov	r5, r0
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	d040      	beq.n	8002c1e <_free_r+0x8a>
 8002b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba0:	1f0c      	subs	r4, r1, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bfb8      	it	lt
 8002ba6:	18e4      	addlt	r4, r4, r3
 8002ba8:	f000 f8de 	bl	8002d68 <__malloc_lock>
 8002bac:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <_free_r+0x8c>)
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	b933      	cbnz	r3, 8002bc0 <_free_r+0x2c>
 8002bb2:	6063      	str	r3, [r4, #4]
 8002bb4:	6014      	str	r4, [r2, #0]
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bbc:	f000 b8da 	b.w	8002d74 <__malloc_unlock>
 8002bc0:	42a3      	cmp	r3, r4
 8002bc2:	d908      	bls.n	8002bd6 <_free_r+0x42>
 8002bc4:	6820      	ldr	r0, [r4, #0]
 8002bc6:	1821      	adds	r1, r4, r0
 8002bc8:	428b      	cmp	r3, r1
 8002bca:	bf01      	itttt	eq
 8002bcc:	6819      	ldreq	r1, [r3, #0]
 8002bce:	685b      	ldreq	r3, [r3, #4]
 8002bd0:	1809      	addeq	r1, r1, r0
 8002bd2:	6021      	streq	r1, [r4, #0]
 8002bd4:	e7ed      	b.n	8002bb2 <_free_r+0x1e>
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	b10b      	cbz	r3, 8002be0 <_free_r+0x4c>
 8002bdc:	42a3      	cmp	r3, r4
 8002bde:	d9fa      	bls.n	8002bd6 <_free_r+0x42>
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	1850      	adds	r0, r2, r1
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d10b      	bne.n	8002c00 <_free_r+0x6c>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	4401      	add	r1, r0
 8002bec:	1850      	adds	r0, r2, r1
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	6011      	str	r1, [r2, #0]
 8002bf2:	d1e0      	bne.n	8002bb6 <_free_r+0x22>
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4408      	add	r0, r1
 8002bfa:	6010      	str	r0, [r2, #0]
 8002bfc:	6053      	str	r3, [r2, #4]
 8002bfe:	e7da      	b.n	8002bb6 <_free_r+0x22>
 8002c00:	d902      	bls.n	8002c08 <_free_r+0x74>
 8002c02:	230c      	movs	r3, #12
 8002c04:	602b      	str	r3, [r5, #0]
 8002c06:	e7d6      	b.n	8002bb6 <_free_r+0x22>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	1821      	adds	r1, r4, r0
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	bf01      	itttt	eq
 8002c10:	6819      	ldreq	r1, [r3, #0]
 8002c12:	685b      	ldreq	r3, [r3, #4]
 8002c14:	1809      	addeq	r1, r1, r0
 8002c16:	6021      	streq	r1, [r4, #0]
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	6054      	str	r4, [r2, #4]
 8002c1c:	e7cb      	b.n	8002bb6 <_free_r+0x22>
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	20000270 	.word	0x20000270

08002c24 <sbrk_aligned>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4e0f      	ldr	r6, [pc, #60]	@ (8002c64 <sbrk_aligned+0x40>)
 8002c28:	460c      	mov	r4, r1
 8002c2a:	6831      	ldr	r1, [r6, #0]
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	b911      	cbnz	r1, 8002c36 <sbrk_aligned+0x12>
 8002c30:	f000 fbaa 	bl	8003388 <_sbrk_r>
 8002c34:	6030      	str	r0, [r6, #0]
 8002c36:	4621      	mov	r1, r4
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f000 fba5 	bl	8003388 <_sbrk_r>
 8002c3e:	1c43      	adds	r3, r0, #1
 8002c40:	d103      	bne.n	8002c4a <sbrk_aligned+0x26>
 8002c42:	f04f 34ff 	mov.w	r4, #4294967295
 8002c46:	4620      	mov	r0, r4
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	1cc4      	adds	r4, r0, #3
 8002c4c:	f024 0403 	bic.w	r4, r4, #3
 8002c50:	42a0      	cmp	r0, r4
 8002c52:	d0f8      	beq.n	8002c46 <sbrk_aligned+0x22>
 8002c54:	1a21      	subs	r1, r4, r0
 8002c56:	4628      	mov	r0, r5
 8002c58:	f000 fb96 	bl	8003388 <_sbrk_r>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d1f2      	bne.n	8002c46 <sbrk_aligned+0x22>
 8002c60:	e7ef      	b.n	8002c42 <sbrk_aligned+0x1e>
 8002c62:	bf00      	nop
 8002c64:	2000026c 	.word	0x2000026c

08002c68 <_malloc_r>:
 8002c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c6c:	1ccd      	adds	r5, r1, #3
 8002c6e:	f025 0503 	bic.w	r5, r5, #3
 8002c72:	3508      	adds	r5, #8
 8002c74:	2d0c      	cmp	r5, #12
 8002c76:	bf38      	it	cc
 8002c78:	250c      	movcc	r5, #12
 8002c7a:	2d00      	cmp	r5, #0
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	db01      	blt.n	8002c84 <_malloc_r+0x1c>
 8002c80:	42a9      	cmp	r1, r5
 8002c82:	d904      	bls.n	8002c8e <_malloc_r+0x26>
 8002c84:	230c      	movs	r3, #12
 8002c86:	6033      	str	r3, [r6, #0]
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d64 <_malloc_r+0xfc>
 8002c92:	f000 f869 	bl	8002d68 <__malloc_lock>
 8002c96:	f8d8 3000 	ldr.w	r3, [r8]
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	bb44      	cbnz	r4, 8002cf0 <_malloc_r+0x88>
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f7ff ffbf 	bl	8002c24 <sbrk_aligned>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	4604      	mov	r4, r0
 8002caa:	d158      	bne.n	8002d5e <_malloc_r+0xf6>
 8002cac:	f8d8 4000 	ldr.w	r4, [r8]
 8002cb0:	4627      	mov	r7, r4
 8002cb2:	2f00      	cmp	r7, #0
 8002cb4:	d143      	bne.n	8002d3e <_malloc_r+0xd6>
 8002cb6:	2c00      	cmp	r4, #0
 8002cb8:	d04b      	beq.n	8002d52 <_malloc_r+0xea>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	4639      	mov	r1, r7
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	eb04 0903 	add.w	r9, r4, r3
 8002cc4:	f000 fb60 	bl	8003388 <_sbrk_r>
 8002cc8:	4581      	cmp	r9, r0
 8002cca:	d142      	bne.n	8002d52 <_malloc_r+0xea>
 8002ccc:	6821      	ldr	r1, [r4, #0]
 8002cce:	4630      	mov	r0, r6
 8002cd0:	1a6d      	subs	r5, r5, r1
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7ff ffa6 	bl	8002c24 <sbrk_aligned>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d03a      	beq.n	8002d52 <_malloc_r+0xea>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	442b      	add	r3, r5
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	bb62      	cbnz	r2, 8002d44 <_malloc_r+0xdc>
 8002cea:	f8c8 7000 	str.w	r7, [r8]
 8002cee:	e00f      	b.n	8002d10 <_malloc_r+0xa8>
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	1b52      	subs	r2, r2, r5
 8002cf4:	d420      	bmi.n	8002d38 <_malloc_r+0xd0>
 8002cf6:	2a0b      	cmp	r2, #11
 8002cf8:	d917      	bls.n	8002d2a <_malloc_r+0xc2>
 8002cfa:	1961      	adds	r1, r4, r5
 8002cfc:	42a3      	cmp	r3, r4
 8002cfe:	6025      	str	r5, [r4, #0]
 8002d00:	bf18      	it	ne
 8002d02:	6059      	strne	r1, [r3, #4]
 8002d04:	6863      	ldr	r3, [r4, #4]
 8002d06:	bf08      	it	eq
 8002d08:	f8c8 1000 	streq.w	r1, [r8]
 8002d0c:	5162      	str	r2, [r4, r5]
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	4630      	mov	r0, r6
 8002d12:	f000 f82f 	bl	8002d74 <__malloc_unlock>
 8002d16:	f104 000b 	add.w	r0, r4, #11
 8002d1a:	1d23      	adds	r3, r4, #4
 8002d1c:	f020 0007 	bic.w	r0, r0, #7
 8002d20:	1ac2      	subs	r2, r0, r3
 8002d22:	bf1c      	itt	ne
 8002d24:	1a1b      	subne	r3, r3, r0
 8002d26:	50a3      	strne	r3, [r4, r2]
 8002d28:	e7af      	b.n	8002c8a <_malloc_r+0x22>
 8002d2a:	6862      	ldr	r2, [r4, #4]
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	bf0c      	ite	eq
 8002d30:	f8c8 2000 	streq.w	r2, [r8]
 8002d34:	605a      	strne	r2, [r3, #4]
 8002d36:	e7eb      	b.n	8002d10 <_malloc_r+0xa8>
 8002d38:	4623      	mov	r3, r4
 8002d3a:	6864      	ldr	r4, [r4, #4]
 8002d3c:	e7ae      	b.n	8002c9c <_malloc_r+0x34>
 8002d3e:	463c      	mov	r4, r7
 8002d40:	687f      	ldr	r7, [r7, #4]
 8002d42:	e7b6      	b.n	8002cb2 <_malloc_r+0x4a>
 8002d44:	461a      	mov	r2, r3
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	d1fb      	bne.n	8002d44 <_malloc_r+0xdc>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6053      	str	r3, [r2, #4]
 8002d50:	e7de      	b.n	8002d10 <_malloc_r+0xa8>
 8002d52:	230c      	movs	r3, #12
 8002d54:	4630      	mov	r0, r6
 8002d56:	6033      	str	r3, [r6, #0]
 8002d58:	f000 f80c 	bl	8002d74 <__malloc_unlock>
 8002d5c:	e794      	b.n	8002c88 <_malloc_r+0x20>
 8002d5e:	6005      	str	r5, [r0, #0]
 8002d60:	e7d6      	b.n	8002d10 <_malloc_r+0xa8>
 8002d62:	bf00      	nop
 8002d64:	20000270 	.word	0x20000270

08002d68 <__malloc_lock>:
 8002d68:	4801      	ldr	r0, [pc, #4]	@ (8002d70 <__malloc_lock+0x8>)
 8002d6a:	f7ff bf11 	b.w	8002b90 <__retarget_lock_acquire_recursive>
 8002d6e:	bf00      	nop
 8002d70:	20000268 	.word	0x20000268

08002d74 <__malloc_unlock>:
 8002d74:	4801      	ldr	r0, [pc, #4]	@ (8002d7c <__malloc_unlock+0x8>)
 8002d76:	f7ff bf0c 	b.w	8002b92 <__retarget_lock_release_recursive>
 8002d7a:	bf00      	nop
 8002d7c:	20000268 	.word	0x20000268

08002d80 <__ssputs_r>:
 8002d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d84:	461f      	mov	r7, r3
 8002d86:	688e      	ldr	r6, [r1, #8]
 8002d88:	4682      	mov	sl, r0
 8002d8a:	42be      	cmp	r6, r7
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	4690      	mov	r8, r2
 8002d90:	680b      	ldr	r3, [r1, #0]
 8002d92:	d82d      	bhi.n	8002df0 <__ssputs_r+0x70>
 8002d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d9c:	d026      	beq.n	8002dec <__ssputs_r+0x6c>
 8002d9e:	6965      	ldr	r5, [r4, #20]
 8002da0:	6909      	ldr	r1, [r1, #16]
 8002da2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002da6:	eba3 0901 	sub.w	r9, r3, r1
 8002daa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dae:	1c7b      	adds	r3, r7, #1
 8002db0:	444b      	add	r3, r9
 8002db2:	106d      	asrs	r5, r5, #1
 8002db4:	429d      	cmp	r5, r3
 8002db6:	bf38      	it	cc
 8002db8:	461d      	movcc	r5, r3
 8002dba:	0553      	lsls	r3, r2, #21
 8002dbc:	d527      	bpl.n	8002e0e <__ssputs_r+0x8e>
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f7ff ff52 	bl	8002c68 <_malloc_r>
 8002dc4:	4606      	mov	r6, r0
 8002dc6:	b360      	cbz	r0, 8002e22 <__ssputs_r+0xa2>
 8002dc8:	464a      	mov	r2, r9
 8002dca:	6921      	ldr	r1, [r4, #16]
 8002dcc:	f000 fafa 	bl	80033c4 <memcpy>
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	6126      	str	r6, [r4, #16]
 8002dde:	444e      	add	r6, r9
 8002de0:	6026      	str	r6, [r4, #0]
 8002de2:	463e      	mov	r6, r7
 8002de4:	6165      	str	r5, [r4, #20]
 8002de6:	eba5 0509 	sub.w	r5, r5, r9
 8002dea:	60a5      	str	r5, [r4, #8]
 8002dec:	42be      	cmp	r6, r7
 8002dee:	d900      	bls.n	8002df2 <__ssputs_r+0x72>
 8002df0:	463e      	mov	r6, r7
 8002df2:	4632      	mov	r2, r6
 8002df4:	4641      	mov	r1, r8
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	f000 faac 	bl	8003354 <memmove>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	1b9b      	subs	r3, r3, r6
 8002e02:	60a3      	str	r3, [r4, #8]
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	4433      	add	r3, r6
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e0e:	462a      	mov	r2, r5
 8002e10:	f000 fae6 	bl	80033e0 <_realloc_r>
 8002e14:	4606      	mov	r6, r0
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d1e0      	bne.n	8002ddc <__ssputs_r+0x5c>
 8002e1a:	4650      	mov	r0, sl
 8002e1c:	6921      	ldr	r1, [r4, #16]
 8002e1e:	f7ff feb9 	bl	8002b94 <_free_r>
 8002e22:	230c      	movs	r3, #12
 8002e24:	f8ca 3000 	str.w	r3, [sl]
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e32:	81a3      	strh	r3, [r4, #12]
 8002e34:	e7e9      	b.n	8002e0a <__ssputs_r+0x8a>
	...

08002e38 <_svfiprintf_r>:
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	4698      	mov	r8, r3
 8002e3e:	898b      	ldrh	r3, [r1, #12]
 8002e40:	4607      	mov	r7, r0
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	460d      	mov	r5, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	b09d      	sub	sp, #116	@ 0x74
 8002e4a:	d510      	bpl.n	8002e6e <_svfiprintf_r+0x36>
 8002e4c:	690b      	ldr	r3, [r1, #16]
 8002e4e:	b973      	cbnz	r3, 8002e6e <_svfiprintf_r+0x36>
 8002e50:	2140      	movs	r1, #64	@ 0x40
 8002e52:	f7ff ff09 	bl	8002c68 <_malloc_r>
 8002e56:	6028      	str	r0, [r5, #0]
 8002e58:	6128      	str	r0, [r5, #16]
 8002e5a:	b930      	cbnz	r0, 8002e6a <_svfiprintf_r+0x32>
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	b01d      	add	sp, #116	@ 0x74
 8002e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6a:	2340      	movs	r3, #64	@ 0x40
 8002e6c:	616b      	str	r3, [r5, #20]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e72:	2320      	movs	r3, #32
 8002e74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e78:	2330      	movs	r3, #48	@ 0x30
 8002e7a:	f04f 0901 	mov.w	r9, #1
 8002e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800301c <_svfiprintf_r+0x1e4>
 8002e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	469a      	mov	sl, r3
 8002e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e92:	b10a      	cbz	r2, 8002e98 <_svfiprintf_r+0x60>
 8002e94:	2a25      	cmp	r2, #37	@ 0x25
 8002e96:	d1f9      	bne.n	8002e8c <_svfiprintf_r+0x54>
 8002e98:	ebba 0b04 	subs.w	fp, sl, r4
 8002e9c:	d00b      	beq.n	8002eb6 <_svfiprintf_r+0x7e>
 8002e9e:	465b      	mov	r3, fp
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f7ff ff6b 	bl	8002d80 <__ssputs_r>
 8002eaa:	3001      	adds	r0, #1
 8002eac:	f000 80a7 	beq.w	8002ffe <_svfiprintf_r+0x1c6>
 8002eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002eb2:	445a      	add	r2, fp
 8002eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 809f 	beq.w	8002ffe <_svfiprintf_r+0x1c6>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eca:	f10a 0a01 	add.w	sl, sl, #1
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	9307      	str	r3, [sp, #28]
 8002ed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ed6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ed8:	4654      	mov	r4, sl
 8002eda:	2205      	movs	r2, #5
 8002edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee0:	484e      	ldr	r0, [pc, #312]	@ (800301c <_svfiprintf_r+0x1e4>)
 8002ee2:	f000 fa61 	bl	80033a8 <memchr>
 8002ee6:	9a04      	ldr	r2, [sp, #16]
 8002ee8:	b9d8      	cbnz	r0, 8002f22 <_svfiprintf_r+0xea>
 8002eea:	06d0      	lsls	r0, r2, #27
 8002eec:	bf44      	itt	mi
 8002eee:	2320      	movmi	r3, #32
 8002ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ef4:	0711      	lsls	r1, r2, #28
 8002ef6:	bf44      	itt	mi
 8002ef8:	232b      	movmi	r3, #43	@ 0x2b
 8002efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002efe:	f89a 3000 	ldrb.w	r3, [sl]
 8002f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f04:	d015      	beq.n	8002f32 <_svfiprintf_r+0xfa>
 8002f06:	4654      	mov	r4, sl
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f04f 0c0a 	mov.w	ip, #10
 8002f0e:	9a07      	ldr	r2, [sp, #28]
 8002f10:	4621      	mov	r1, r4
 8002f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f16:	3b30      	subs	r3, #48	@ 0x30
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d94b      	bls.n	8002fb4 <_svfiprintf_r+0x17c>
 8002f1c:	b1b0      	cbz	r0, 8002f4c <_svfiprintf_r+0x114>
 8002f1e:	9207      	str	r2, [sp, #28]
 8002f20:	e014      	b.n	8002f4c <_svfiprintf_r+0x114>
 8002f22:	eba0 0308 	sub.w	r3, r0, r8
 8002f26:	fa09 f303 	lsl.w	r3, r9, r3
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	46a2      	mov	sl, r4
 8002f2e:	9304      	str	r3, [sp, #16]
 8002f30:	e7d2      	b.n	8002ed8 <_svfiprintf_r+0xa0>
 8002f32:	9b03      	ldr	r3, [sp, #12]
 8002f34:	1d19      	adds	r1, r3, #4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	9103      	str	r1, [sp, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bfbb      	ittet	lt
 8002f3e:	425b      	neglt	r3, r3
 8002f40:	f042 0202 	orrlt.w	r2, r2, #2
 8002f44:	9307      	strge	r3, [sp, #28]
 8002f46:	9307      	strlt	r3, [sp, #28]
 8002f48:	bfb8      	it	lt
 8002f4a:	9204      	strlt	r2, [sp, #16]
 8002f4c:	7823      	ldrb	r3, [r4, #0]
 8002f4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f50:	d10a      	bne.n	8002f68 <_svfiprintf_r+0x130>
 8002f52:	7863      	ldrb	r3, [r4, #1]
 8002f54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f56:	d132      	bne.n	8002fbe <_svfiprintf_r+0x186>
 8002f58:	9b03      	ldr	r3, [sp, #12]
 8002f5a:	3402      	adds	r4, #2
 8002f5c:	1d1a      	adds	r2, r3, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	9203      	str	r2, [sp, #12]
 8002f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f66:	9305      	str	r3, [sp, #20]
 8002f68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003020 <_svfiprintf_r+0x1e8>
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	4650      	mov	r0, sl
 8002f70:	7821      	ldrb	r1, [r4, #0]
 8002f72:	f000 fa19 	bl	80033a8 <memchr>
 8002f76:	b138      	cbz	r0, 8002f88 <_svfiprintf_r+0x150>
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	eba0 000a 	sub.w	r0, r0, sl
 8002f80:	4082      	lsls	r2, r0
 8002f82:	4313      	orrs	r3, r2
 8002f84:	3401      	adds	r4, #1
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8c:	2206      	movs	r2, #6
 8002f8e:	4825      	ldr	r0, [pc, #148]	@ (8003024 <_svfiprintf_r+0x1ec>)
 8002f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f94:	f000 fa08 	bl	80033a8 <memchr>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d036      	beq.n	800300a <_svfiprintf_r+0x1d2>
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <_svfiprintf_r+0x1f0>)
 8002f9e:	bb1b      	cbnz	r3, 8002fe8 <_svfiprintf_r+0x1b0>
 8002fa0:	9b03      	ldr	r3, [sp, #12]
 8002fa2:	3307      	adds	r3, #7
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	3308      	adds	r3, #8
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fae:	4433      	add	r3, r6
 8002fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb2:	e76a      	b.n	8002e8a <_svfiprintf_r+0x52>
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fbc:	e7a8      	b.n	8002f10 <_svfiprintf_r+0xd8>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f04f 0c0a 	mov.w	ip, #10
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	3401      	adds	r4, #1
 8002fc8:	9305      	str	r3, [sp, #20]
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fd0:	3a30      	subs	r2, #48	@ 0x30
 8002fd2:	2a09      	cmp	r2, #9
 8002fd4:	d903      	bls.n	8002fde <_svfiprintf_r+0x1a6>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0c6      	beq.n	8002f68 <_svfiprintf_r+0x130>
 8002fda:	9105      	str	r1, [sp, #20]
 8002fdc:	e7c4      	b.n	8002f68 <_svfiprintf_r+0x130>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fe6:	e7f0      	b.n	8002fca <_svfiprintf_r+0x192>
 8002fe8:	ab03      	add	r3, sp, #12
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	462a      	mov	r2, r5
 8002fee:	4638      	mov	r0, r7
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <_svfiprintf_r+0x1f4>)
 8002ff2:	a904      	add	r1, sp, #16
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	1c42      	adds	r2, r0, #1
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	d1d6      	bne.n	8002fac <_svfiprintf_r+0x174>
 8002ffe:	89ab      	ldrh	r3, [r5, #12]
 8003000:	065b      	lsls	r3, r3, #25
 8003002:	f53f af2d 	bmi.w	8002e60 <_svfiprintf_r+0x28>
 8003006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003008:	e72c      	b.n	8002e64 <_svfiprintf_r+0x2c>
 800300a:	ab03      	add	r3, sp, #12
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	462a      	mov	r2, r5
 8003010:	4638      	mov	r0, r7
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <_svfiprintf_r+0x1f4>)
 8003014:	a904      	add	r1, sp, #16
 8003016:	f000 f87d 	bl	8003114 <_printf_i>
 800301a:	e7ed      	b.n	8002ff8 <_svfiprintf_r+0x1c0>
 800301c:	080034a2 	.word	0x080034a2
 8003020:	080034a8 	.word	0x080034a8
 8003024:	080034ac 	.word	0x080034ac
 8003028:	00000000 	.word	0x00000000
 800302c:	08002d81 	.word	0x08002d81

08003030 <_printf_common>:
 8003030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003034:	4616      	mov	r6, r2
 8003036:	4698      	mov	r8, r3
 8003038:	688a      	ldr	r2, [r1, #8]
 800303a:	690b      	ldr	r3, [r1, #16]
 800303c:	4607      	mov	r7, r0
 800303e:	4293      	cmp	r3, r2
 8003040:	bfb8      	it	lt
 8003042:	4613      	movlt	r3, r2
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800304a:	460c      	mov	r4, r1
 800304c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003050:	b10a      	cbz	r2, 8003056 <_printf_common+0x26>
 8003052:	3301      	adds	r3, #1
 8003054:	6033      	str	r3, [r6, #0]
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	0699      	lsls	r1, r3, #26
 800305a:	bf42      	ittt	mi
 800305c:	6833      	ldrmi	r3, [r6, #0]
 800305e:	3302      	addmi	r3, #2
 8003060:	6033      	strmi	r3, [r6, #0]
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	f015 0506 	ands.w	r5, r5, #6
 8003068:	d106      	bne.n	8003078 <_printf_common+0x48>
 800306a:	f104 0a19 	add.w	sl, r4, #25
 800306e:	68e3      	ldr	r3, [r4, #12]
 8003070:	6832      	ldr	r2, [r6, #0]
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	42ab      	cmp	r3, r5
 8003076:	dc2b      	bgt.n	80030d0 <_printf_common+0xa0>
 8003078:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	3b00      	subs	r3, #0
 8003080:	bf18      	it	ne
 8003082:	2301      	movne	r3, #1
 8003084:	0692      	lsls	r2, r2, #26
 8003086:	d430      	bmi.n	80030ea <_printf_common+0xba>
 8003088:	4641      	mov	r1, r8
 800308a:	4638      	mov	r0, r7
 800308c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003090:	47c8      	blx	r9
 8003092:	3001      	adds	r0, #1
 8003094:	d023      	beq.n	80030de <_printf_common+0xae>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	6922      	ldr	r2, [r4, #16]
 800309a:	f003 0306 	and.w	r3, r3, #6
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf14      	ite	ne
 80030a2:	2500      	movne	r5, #0
 80030a4:	6833      	ldreq	r3, [r6, #0]
 80030a6:	f04f 0600 	mov.w	r6, #0
 80030aa:	bf08      	it	eq
 80030ac:	68e5      	ldreq	r5, [r4, #12]
 80030ae:	f104 041a 	add.w	r4, r4, #26
 80030b2:	bf08      	it	eq
 80030b4:	1aed      	subeq	r5, r5, r3
 80030b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ba:	bf08      	it	eq
 80030bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c0:	4293      	cmp	r3, r2
 80030c2:	bfc4      	itt	gt
 80030c4:	1a9b      	subgt	r3, r3, r2
 80030c6:	18ed      	addgt	r5, r5, r3
 80030c8:	42b5      	cmp	r5, r6
 80030ca:	d11a      	bne.n	8003102 <_printf_common+0xd2>
 80030cc:	2000      	movs	r0, #0
 80030ce:	e008      	b.n	80030e2 <_printf_common+0xb2>
 80030d0:	2301      	movs	r3, #1
 80030d2:	4652      	mov	r2, sl
 80030d4:	4641      	mov	r1, r8
 80030d6:	4638      	mov	r0, r7
 80030d8:	47c8      	blx	r9
 80030da:	3001      	adds	r0, #1
 80030dc:	d103      	bne.n	80030e6 <_printf_common+0xb6>
 80030de:	f04f 30ff 	mov.w	r0, #4294967295
 80030e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e6:	3501      	adds	r5, #1
 80030e8:	e7c1      	b.n	800306e <_printf_common+0x3e>
 80030ea:	2030      	movs	r0, #48	@ 0x30
 80030ec:	18e1      	adds	r1, r4, r3
 80030ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030f8:	4422      	add	r2, r4
 80030fa:	3302      	adds	r3, #2
 80030fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003100:	e7c2      	b.n	8003088 <_printf_common+0x58>
 8003102:	2301      	movs	r3, #1
 8003104:	4622      	mov	r2, r4
 8003106:	4641      	mov	r1, r8
 8003108:	4638      	mov	r0, r7
 800310a:	47c8      	blx	r9
 800310c:	3001      	adds	r0, #1
 800310e:	d0e6      	beq.n	80030de <_printf_common+0xae>
 8003110:	3601      	adds	r6, #1
 8003112:	e7d9      	b.n	80030c8 <_printf_common+0x98>

08003114 <_printf_i>:
 8003114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	7e0f      	ldrb	r7, [r1, #24]
 800311a:	4691      	mov	r9, r2
 800311c:	2f78      	cmp	r7, #120	@ 0x78
 800311e:	4680      	mov	r8, r0
 8003120:	460c      	mov	r4, r1
 8003122:	469a      	mov	sl, r3
 8003124:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800312a:	d807      	bhi.n	800313c <_printf_i+0x28>
 800312c:	2f62      	cmp	r7, #98	@ 0x62
 800312e:	d80a      	bhi.n	8003146 <_printf_i+0x32>
 8003130:	2f00      	cmp	r7, #0
 8003132:	f000 80d3 	beq.w	80032dc <_printf_i+0x1c8>
 8003136:	2f58      	cmp	r7, #88	@ 0x58
 8003138:	f000 80ba 	beq.w	80032b0 <_printf_i+0x19c>
 800313c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003144:	e03a      	b.n	80031bc <_printf_i+0xa8>
 8003146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800314a:	2b15      	cmp	r3, #21
 800314c:	d8f6      	bhi.n	800313c <_printf_i+0x28>
 800314e:	a101      	add	r1, pc, #4	@ (adr r1, 8003154 <_printf_i+0x40>)
 8003150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003154:	080031ad 	.word	0x080031ad
 8003158:	080031c1 	.word	0x080031c1
 800315c:	0800313d 	.word	0x0800313d
 8003160:	0800313d 	.word	0x0800313d
 8003164:	0800313d 	.word	0x0800313d
 8003168:	0800313d 	.word	0x0800313d
 800316c:	080031c1 	.word	0x080031c1
 8003170:	0800313d 	.word	0x0800313d
 8003174:	0800313d 	.word	0x0800313d
 8003178:	0800313d 	.word	0x0800313d
 800317c:	0800313d 	.word	0x0800313d
 8003180:	080032c3 	.word	0x080032c3
 8003184:	080031eb 	.word	0x080031eb
 8003188:	0800327d 	.word	0x0800327d
 800318c:	0800313d 	.word	0x0800313d
 8003190:	0800313d 	.word	0x0800313d
 8003194:	080032e5 	.word	0x080032e5
 8003198:	0800313d 	.word	0x0800313d
 800319c:	080031eb 	.word	0x080031eb
 80031a0:	0800313d 	.word	0x0800313d
 80031a4:	0800313d 	.word	0x0800313d
 80031a8:	08003285 	.word	0x08003285
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6032      	str	r2, [r6, #0]
 80031b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031bc:	2301      	movs	r3, #1
 80031be:	e09e      	b.n	80032fe <_printf_i+0x1ea>
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	1d19      	adds	r1, r3, #4
 80031c6:	6031      	str	r1, [r6, #0]
 80031c8:	0606      	lsls	r6, r0, #24
 80031ca:	d501      	bpl.n	80031d0 <_printf_i+0xbc>
 80031cc:	681d      	ldr	r5, [r3, #0]
 80031ce:	e003      	b.n	80031d8 <_printf_i+0xc4>
 80031d0:	0645      	lsls	r5, r0, #25
 80031d2:	d5fb      	bpl.n	80031cc <_printf_i+0xb8>
 80031d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031d8:	2d00      	cmp	r5, #0
 80031da:	da03      	bge.n	80031e4 <_printf_i+0xd0>
 80031dc:	232d      	movs	r3, #45	@ 0x2d
 80031de:	426d      	negs	r5, r5
 80031e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031e4:	230a      	movs	r3, #10
 80031e6:	4859      	ldr	r0, [pc, #356]	@ (800334c <_printf_i+0x238>)
 80031e8:	e011      	b.n	800320e <_printf_i+0xfa>
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	0608      	lsls	r0, r1, #24
 80031f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80031f4:	d402      	bmi.n	80031fc <_printf_i+0xe8>
 80031f6:	0649      	lsls	r1, r1, #25
 80031f8:	bf48      	it	mi
 80031fa:	b2ad      	uxthmi	r5, r5
 80031fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80031fe:	6033      	str	r3, [r6, #0]
 8003200:	bf14      	ite	ne
 8003202:	230a      	movne	r3, #10
 8003204:	2308      	moveq	r3, #8
 8003206:	4851      	ldr	r0, [pc, #324]	@ (800334c <_printf_i+0x238>)
 8003208:	2100      	movs	r1, #0
 800320a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800320e:	6866      	ldr	r6, [r4, #4]
 8003210:	2e00      	cmp	r6, #0
 8003212:	bfa8      	it	ge
 8003214:	6821      	ldrge	r1, [r4, #0]
 8003216:	60a6      	str	r6, [r4, #8]
 8003218:	bfa4      	itt	ge
 800321a:	f021 0104 	bicge.w	r1, r1, #4
 800321e:	6021      	strge	r1, [r4, #0]
 8003220:	b90d      	cbnz	r5, 8003226 <_printf_i+0x112>
 8003222:	2e00      	cmp	r6, #0
 8003224:	d04b      	beq.n	80032be <_printf_i+0x1aa>
 8003226:	4616      	mov	r6, r2
 8003228:	fbb5 f1f3 	udiv	r1, r5, r3
 800322c:	fb03 5711 	mls	r7, r3, r1, r5
 8003230:	5dc7      	ldrb	r7, [r0, r7]
 8003232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003236:	462f      	mov	r7, r5
 8003238:	42bb      	cmp	r3, r7
 800323a:	460d      	mov	r5, r1
 800323c:	d9f4      	bls.n	8003228 <_printf_i+0x114>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d10b      	bne.n	800325a <_printf_i+0x146>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	07df      	lsls	r7, r3, #31
 8003246:	d508      	bpl.n	800325a <_printf_i+0x146>
 8003248:	6923      	ldr	r3, [r4, #16]
 800324a:	6861      	ldr	r1, [r4, #4]
 800324c:	4299      	cmp	r1, r3
 800324e:	bfde      	ittt	le
 8003250:	2330      	movle	r3, #48	@ 0x30
 8003252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800325a:	1b92      	subs	r2, r2, r6
 800325c:	6122      	str	r2, [r4, #16]
 800325e:	464b      	mov	r3, r9
 8003260:	4621      	mov	r1, r4
 8003262:	4640      	mov	r0, r8
 8003264:	f8cd a000 	str.w	sl, [sp]
 8003268:	aa03      	add	r2, sp, #12
 800326a:	f7ff fee1 	bl	8003030 <_printf_common>
 800326e:	3001      	adds	r0, #1
 8003270:	d14a      	bne.n	8003308 <_printf_i+0x1f4>
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	b004      	add	sp, #16
 8003278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	2778      	movs	r7, #120	@ 0x78
 8003286:	4832      	ldr	r0, [pc, #200]	@ (8003350 <_printf_i+0x23c>)
 8003288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	6831      	ldr	r1, [r6, #0]
 8003290:	061f      	lsls	r7, r3, #24
 8003292:	f851 5b04 	ldr.w	r5, [r1], #4
 8003296:	d402      	bmi.n	800329e <_printf_i+0x18a>
 8003298:	065f      	lsls	r7, r3, #25
 800329a:	bf48      	it	mi
 800329c:	b2ad      	uxthmi	r5, r5
 800329e:	6031      	str	r1, [r6, #0]
 80032a0:	07d9      	lsls	r1, r3, #31
 80032a2:	bf44      	itt	mi
 80032a4:	f043 0320 	orrmi.w	r3, r3, #32
 80032a8:	6023      	strmi	r3, [r4, #0]
 80032aa:	b11d      	cbz	r5, 80032b4 <_printf_i+0x1a0>
 80032ac:	2310      	movs	r3, #16
 80032ae:	e7ab      	b.n	8003208 <_printf_i+0xf4>
 80032b0:	4826      	ldr	r0, [pc, #152]	@ (800334c <_printf_i+0x238>)
 80032b2:	e7e9      	b.n	8003288 <_printf_i+0x174>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f023 0320 	bic.w	r3, r3, #32
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	e7f6      	b.n	80032ac <_printf_i+0x198>
 80032be:	4616      	mov	r6, r2
 80032c0:	e7bd      	b.n	800323e <_printf_i+0x12a>
 80032c2:	6833      	ldr	r3, [r6, #0]
 80032c4:	6825      	ldr	r5, [r4, #0]
 80032c6:	1d18      	adds	r0, r3, #4
 80032c8:	6961      	ldr	r1, [r4, #20]
 80032ca:	6030      	str	r0, [r6, #0]
 80032cc:	062e      	lsls	r6, r5, #24
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	d501      	bpl.n	80032d6 <_printf_i+0x1c2>
 80032d2:	6019      	str	r1, [r3, #0]
 80032d4:	e002      	b.n	80032dc <_printf_i+0x1c8>
 80032d6:	0668      	lsls	r0, r5, #25
 80032d8:	d5fb      	bpl.n	80032d2 <_printf_i+0x1be>
 80032da:	8019      	strh	r1, [r3, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	4616      	mov	r6, r2
 80032e0:	6123      	str	r3, [r4, #16]
 80032e2:	e7bc      	b.n	800325e <_printf_i+0x14a>
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	2100      	movs	r1, #0
 80032e8:	1d1a      	adds	r2, r3, #4
 80032ea:	6032      	str	r2, [r6, #0]
 80032ec:	681e      	ldr	r6, [r3, #0]
 80032ee:	6862      	ldr	r2, [r4, #4]
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 f859 	bl	80033a8 <memchr>
 80032f6:	b108      	cbz	r0, 80032fc <_printf_i+0x1e8>
 80032f8:	1b80      	subs	r0, r0, r6
 80032fa:	6060      	str	r0, [r4, #4]
 80032fc:	6863      	ldr	r3, [r4, #4]
 80032fe:	6123      	str	r3, [r4, #16]
 8003300:	2300      	movs	r3, #0
 8003302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003306:	e7aa      	b.n	800325e <_printf_i+0x14a>
 8003308:	4632      	mov	r2, r6
 800330a:	4649      	mov	r1, r9
 800330c:	4640      	mov	r0, r8
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	47d0      	blx	sl
 8003312:	3001      	adds	r0, #1
 8003314:	d0ad      	beq.n	8003272 <_printf_i+0x15e>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	079b      	lsls	r3, r3, #30
 800331a:	d413      	bmi.n	8003344 <_printf_i+0x230>
 800331c:	68e0      	ldr	r0, [r4, #12]
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	4298      	cmp	r0, r3
 8003322:	bfb8      	it	lt
 8003324:	4618      	movlt	r0, r3
 8003326:	e7a6      	b.n	8003276 <_printf_i+0x162>
 8003328:	2301      	movs	r3, #1
 800332a:	4632      	mov	r2, r6
 800332c:	4649      	mov	r1, r9
 800332e:	4640      	mov	r0, r8
 8003330:	47d0      	blx	sl
 8003332:	3001      	adds	r0, #1
 8003334:	d09d      	beq.n	8003272 <_printf_i+0x15e>
 8003336:	3501      	adds	r5, #1
 8003338:	68e3      	ldr	r3, [r4, #12]
 800333a:	9903      	ldr	r1, [sp, #12]
 800333c:	1a5b      	subs	r3, r3, r1
 800333e:	42ab      	cmp	r3, r5
 8003340:	dcf2      	bgt.n	8003328 <_printf_i+0x214>
 8003342:	e7eb      	b.n	800331c <_printf_i+0x208>
 8003344:	2500      	movs	r5, #0
 8003346:	f104 0619 	add.w	r6, r4, #25
 800334a:	e7f5      	b.n	8003338 <_printf_i+0x224>
 800334c:	080034b3 	.word	0x080034b3
 8003350:	080034c4 	.word	0x080034c4

08003354 <memmove>:
 8003354:	4288      	cmp	r0, r1
 8003356:	b510      	push	{r4, lr}
 8003358:	eb01 0402 	add.w	r4, r1, r2
 800335c:	d902      	bls.n	8003364 <memmove+0x10>
 800335e:	4284      	cmp	r4, r0
 8003360:	4623      	mov	r3, r4
 8003362:	d807      	bhi.n	8003374 <memmove+0x20>
 8003364:	1e43      	subs	r3, r0, #1
 8003366:	42a1      	cmp	r1, r4
 8003368:	d008      	beq.n	800337c <memmove+0x28>
 800336a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800336e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003372:	e7f8      	b.n	8003366 <memmove+0x12>
 8003374:	4601      	mov	r1, r0
 8003376:	4402      	add	r2, r0
 8003378:	428a      	cmp	r2, r1
 800337a:	d100      	bne.n	800337e <memmove+0x2a>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003386:	e7f7      	b.n	8003378 <memmove+0x24>

08003388 <_sbrk_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	2300      	movs	r3, #0
 800338c:	4d05      	ldr	r5, [pc, #20]	@ (80033a4 <_sbrk_r+0x1c>)
 800338e:	4604      	mov	r4, r0
 8003390:	4608      	mov	r0, r1
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	f7fd f9d2 	bl	800073c <_sbrk>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d102      	bne.n	80033a2 <_sbrk_r+0x1a>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	b103      	cbz	r3, 80033a2 <_sbrk_r+0x1a>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
 80033a4:	20000264 	.word	0x20000264

080033a8 <memchr>:
 80033a8:	4603      	mov	r3, r0
 80033aa:	b510      	push	{r4, lr}
 80033ac:	b2c9      	uxtb	r1, r1
 80033ae:	4402      	add	r2, r0
 80033b0:	4293      	cmp	r3, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	d101      	bne.n	80033ba <memchr+0x12>
 80033b6:	2000      	movs	r0, #0
 80033b8:	e003      	b.n	80033c2 <memchr+0x1a>
 80033ba:	7804      	ldrb	r4, [r0, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	428c      	cmp	r4, r1
 80033c0:	d1f6      	bne.n	80033b0 <memchr+0x8>
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <memcpy>:
 80033c4:	440a      	add	r2, r1
 80033c6:	4291      	cmp	r1, r2
 80033c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033cc:	d100      	bne.n	80033d0 <memcpy+0xc>
 80033ce:	4770      	bx	lr
 80033d0:	b510      	push	{r4, lr}
 80033d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033dc:	d1f9      	bne.n	80033d2 <memcpy+0xe>
 80033de:	bd10      	pop	{r4, pc}

080033e0 <_realloc_r>:
 80033e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033e4:	4680      	mov	r8, r0
 80033e6:	4615      	mov	r5, r2
 80033e8:	460c      	mov	r4, r1
 80033ea:	b921      	cbnz	r1, 80033f6 <_realloc_r+0x16>
 80033ec:	4611      	mov	r1, r2
 80033ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f2:	f7ff bc39 	b.w	8002c68 <_malloc_r>
 80033f6:	b92a      	cbnz	r2, 8003404 <_realloc_r+0x24>
 80033f8:	f7ff fbcc 	bl	8002b94 <_free_r>
 80033fc:	2400      	movs	r4, #0
 80033fe:	4620      	mov	r0, r4
 8003400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003404:	f000 f81a 	bl	800343c <_malloc_usable_size_r>
 8003408:	4285      	cmp	r5, r0
 800340a:	4606      	mov	r6, r0
 800340c:	d802      	bhi.n	8003414 <_realloc_r+0x34>
 800340e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003412:	d8f4      	bhi.n	80033fe <_realloc_r+0x1e>
 8003414:	4629      	mov	r1, r5
 8003416:	4640      	mov	r0, r8
 8003418:	f7ff fc26 	bl	8002c68 <_malloc_r>
 800341c:	4607      	mov	r7, r0
 800341e:	2800      	cmp	r0, #0
 8003420:	d0ec      	beq.n	80033fc <_realloc_r+0x1c>
 8003422:	42b5      	cmp	r5, r6
 8003424:	462a      	mov	r2, r5
 8003426:	4621      	mov	r1, r4
 8003428:	bf28      	it	cs
 800342a:	4632      	movcs	r2, r6
 800342c:	f7ff ffca 	bl	80033c4 <memcpy>
 8003430:	4621      	mov	r1, r4
 8003432:	4640      	mov	r0, r8
 8003434:	f7ff fbae 	bl	8002b94 <_free_r>
 8003438:	463c      	mov	r4, r7
 800343a:	e7e0      	b.n	80033fe <_realloc_r+0x1e>

0800343c <_malloc_usable_size_r>:
 800343c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003440:	1f18      	subs	r0, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbc      	itt	lt
 8003446:	580b      	ldrlt	r3, [r1, r0]
 8003448:	18c0      	addlt	r0, r0, r3
 800344a:	4770      	bx	lr

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
